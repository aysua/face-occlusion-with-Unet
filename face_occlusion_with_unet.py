# -*- coding: utf-8 -*-
"""face-occlusion-with-Unet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YOxUlKqRxbmUPUCcCcVHOkrXzeOmrwGV
"""

import gdown
import pickle

url_x=gdown.download("https://drive.google.com/uc?id={0}".format("1-7E0x-UGFjotUH8UJAWruM9Y0rwEzYzV"),"mydata2",quiet = False)
url_y=gdown.download("https://drive.google.com/uc?id={0}".format("1-JVnG_wVJR3VgAwi6-Hhu2C-ZAyQ2-_9"),"colabe_indirince_dosyayı_kaydetmek_istediğim_ad",quiet = False)

file_x=open(url_x,'rb')
img_x=pickle.load(file_x) 

file_y=open(url_y,'rb')
img_y=pickle.load(file_y)

import keras
from keras.layers import Input, Dense, Activation, Dropout
from keras.models import Model, Sequential
import numpy as np
import matplotlib.pyplot as plt
import pickle
import os

print(img_x.shape)
print(img_y.shape)

from skimage.transform import resize
print(len(img_x))
img_x= resize(img_x, (len(img_x),64,64,1), anti_aliasing=False)##anti_aliasing bozukluğu düzeltme
img_y = resize(img_y, (len(img_y),64,64,1), anti_aliasing=False)

# Print the shape after resize
print(img_x.shape)
print(img_y.shape)

fig=plt.figure(figsize=(6, 6))#çizilecek grafiğin boyutu ekranda sen gör diye zoom gibi
fig.add_subplot(1, 2, 1)#ekranda grafiğin konumu ve büyüklüğü sayo küçüldükçe grafik büyüyor yxz z'i tam çözemedim aşağıdaki örn e bakabilirsin
""""örn
import matplotlib.pyplot as plt
fig = plt.figure()
fig.add_subplot(211)   #top left
fig.add_subplot(222)   #top right
fig.add_subplot(223)   #bottom left
fig.add_subplot(224)   #bottom right 
plt.show()
"""
#şu ana kadar sadece grafiğin boyutunu ve konumunu ayarladık. şimdi grafiğe resmi atıyoruz
plt.imshow(img_x[20,:,:,0],cmap="gray")
fig.add_subplot(1, 2, 2)
plt.imshow(img_y[20,:,:,0],cmap="gray")

plt.imshow(img_x[1,:,:])

#normalize ettiğinden emin oluyor
print(img_x[1,50:64,0:5,0])
print(img_y[0,0:5,0:5,0])

from keras.layers import Conv2D, MaxPooling2D,BatchNormalization,UpSampling2D, Conv2DTranspose, ReLU

def create_model():
  generator=Sequential()
  
  generator.add(Conv2D(64,(3,3),strides=(1,1),input_shape=(img_x.shape[1:]),padding="SAME",kernel_initializer='random_normal'))
  #her zaman ilk katmanda input shape vermek zorundasın, sırayla: filtre sayısı, stride(atlama),input shape(64,64,1),padding(kenarlık),ağırlıkların başlangıç değerleri
  generator.add(BatchNormalization())
  generator.add(ReLU())
  #generator.add(Dropout(0.3))
  
  generator.add(Conv2D(64,(3,3),strides=(1,1), padding="SAME",kernel_initializer='random_normal'))
  generator.add(BatchNormalization())
  generator.add(ReLU())
  #generator.add(Dropout(0.3))
  
  generator.add(MaxPooling2D(pool_size=(2,2),strides=(2,2),padding="same"))
  
  generator.add(Conv2D(128,(3,3),strides=(1,1), padding="SAME",kernel_initializer='random_normal'))
  generator.add(BatchNormalization())
  generator.add(ReLU())
  #generator.add(Dropout(0.3))
  
  generator.add(Conv2D(128,(3,3),strides=(1,1), padding="SAME",kernel_initializer='random_normal'))
  generator.add(BatchNormalization())
  generator.add(ReLU())
  #generator.add(Dropout(0.3))
  
  generator.add(MaxPooling2D(pool_size=(2,2),strides=(2,2),padding="same"))
  
  generator.add(Conv2D(256,(3,3),strides=(1,1),padding="SAME",kernel_initializer='random_normal'))
  generator.add(BatchNormalization())
  generator.add(ReLU())
  #generator.add(Dropout(0.3))
  
  generator.add(Conv2D(256,(3,3),strides=(1,1),padding="SAME",kernel_initializer='random_normal'))
  generator.add(BatchNormalization())
  generator.add(ReLU())
  #generator.add(Dropout(0.3))
  
  """ 
  generator.add(MaxPooling2D(pool_size=(2,2),strides=(2,2),padding="same"))

  generator.add(Conv2D(512,(3,3),strides=(1,1),padding="SAME",kernel_initializer='random_normal'))
  generator.add(BatchNormalization())
  generator.add(ReLU())
  generator.add(Dropout(0.3))
  
  generator.add(Conv2D(512,(3,3),strides=(1,1),padding="SAME",kernel_initializer='random_normal'))
  generator.add(BatchNormalization())
  generator.add(ReLU())
  generator.add(Dropout(0.3))
  
  generator.add(MaxPooling2D(pool_size=(2,2),strides=(2,2),padding="same"))
  
  generator.add(Conv2D(1024,(3,3),strides=(1,1),padding="SAME",kernel_initializer='random_normal'))
  generator.add(BatchNormalization())
  generator.add(ReLU())
  generator.add(Dropout(0.3))
  
  generator.add(Conv2D(1024,(3,3),strides=(1,1),padding="SAME",kernel_initializer='random_normal'))
  generator.add(BatchNormalization())
  generator.add(ReLU())
  generator.add(Dropout(0.3))
  
  generator.add(UpSampling2D(size=(2,2),data_format=None,interpolation='nearest'))
  
  generator.add(Conv2D(512,(3,3),strides=(1,1),padding="SAME",kernel_initializer='random_normal'))
  generator.add(BatchNormalization())
  generator.add(ReLU())
  generator.add(Dropout(0.3))
  
  generator.add(Conv2D(512,(3,3),strides=(1,1),padding="SAME",kernel_initializer='random_normal'))
  generator.add(BatchNormalization())
  generator.add(ReLU())
  generator.add(Dropout(0.3))
  
  generator.add(UpSampling2D(size=(2,2),data_format=None,interpolation='nearest'))

  generator.add(Conv2D(256,(3,3),strides=(1,1),padding="SAME",kernel_initializer='random_normal'))
  generator.add(BatchNormalization())
  generator.add(ReLU())
  generator.add(Dropout(0.3))
  
  generator.add(Conv2D(256,(3,3),strides=(1,1),padding="SAME",kernel_initializer='random_normal'))
  generator.add(BatchNormalization())
  generator.add(ReLU())
  generator.add(Dropout(0.3))
  """
  generator.add(UpSampling2D(size=(2,2),data_format=None,interpolation='nearest'))

  generator.add(Conv2D(128,(3,3),strides=(1,1),padding="SAME",kernel_initializer='random_normal'))
  generator.add(BatchNormalization())
  generator.add(ReLU())
  #generator.add(Dropout(0.3))
  
  generator.add(Conv2D(128,(3,3),strides=(1,1),padding="SAME",kernel_initializer='random_normal'))
  generator.add(BatchNormalization())
  generator.add(ReLU())
  #generator.add(Dropout(0.3))
  
  generator.add(UpSampling2D(size=(2,2),data_format=None,interpolation='nearest'))

  generator.add(Conv2D(64,(3,3),strides=(1,1),padding="SAME",kernel_initializer='random_normal'))
  generator.add(BatchNormalization())
  generator.add(ReLU())
  #generator.add(Dropout(0.3))
  
  generator.add(Conv2D(64,(3,3),strides=(1,1),padding="SAME",kernel_initializer='random_normal'))
  generator.add(BatchNormalization())
  generator.add(ReLU())
  #generator.add(Dropout(0.3))
  
  generator.add(Conv2D(1,(1,1),strides=(1,1),padding="SAME",kernel_initializer='random_normal'))
  generator.add(BatchNormalization())
  generator.add(ReLU())
  #generator.add(Dropout(0.3))
  
  return generator

generator=create_model()
generator.summary()

from keras.optimizers import Adam

generator.compile(loss='mean_squared_error', optimizer = Adam(lr=0.00001))

def save_models(ae,path,epoch):
  datenow = str(datetime.datetime.now().strftime('%m-%d-%H:%M'))
  ae.save_weights(os.path.join(path,"{0}_wgan_{1}.h5".format(epoch,datenow)))
  ae.save(os.path.join(path,"{0}_mgan_{1}.h5".format(epoch,datenow)))

my_model=generator.fit(img_x[0:4400], img_y[0:4400],
                epochs=50,
                batch_size=64,validation_split=0.20,
                shuffle=True)

for key in my_model.history:
  print(my_model.history[key])

pred=generator.predict(img_x[4400:4471,:,:,:])
print(type(pred))
print(np.shape(img_x))
print (type(img_x))

fig = plt.figure(figsize = (20,10))

fig.add_subplot(3,3,1)

plt.imshow(np.reshape(img_x[4470],(64,64)),  cmap = "gray")

fig.add_subplot(3,3,2)

plt.imshow(np.reshape(pred[70],(64,64)),  cmap = "gray")

import cv2
test_data=gdown.download("https://drive.google.com/uc?id={0}".format("1UVVRg0zwB9_K3TSDN7oo-CueC6qDD7WI"),"testdata",quiet = False)
print(type(test_data))

def upload_files():
  from google.colab import files
  uploaded = files.upload()
  for k, v in uploaded.items():
    open(k, 'wb').write(v)
  return list(uploaded.keys())

my_test_img=upload_files()

# Commented out IPython magic to ensure Python compatibility.
import cv2

import numpy as np
import matplotlib.pylab as plt

# %matplotlib inline
im = plt.imread("image.PNG")

print(im.shape)
print(type(im))
plt.imshow(im,cmap="gray")

""""from skimage.transform import resize
im = resize(im, (1,64,64,1), anti_aliasing=False)
print(im.shape)"""""

from PIL import Image

im.thumbnail((64, 64), Image.ANTIALIAS) # resizes image in-place
imgplot = plt.imshow(im)

plt.imshow(im,cmap="gray")